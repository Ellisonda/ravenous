{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","adress","city","state","zipCode","category","toUpperCase","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","renderSortByOptions","bind","handleTermChange","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","placeholder","onChange","href","yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","zip_code","categories","title","rating","review_count","App","Yelp","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aaccaec2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render(){\r\n      const {business}=this.props; //Esto lo ponemos xq asi n es necesario poner en casa business un this.props delante, pero tb seria valido\r\n        return (\r\n  <div className=\"Business\">\r\n   <div className=\"image-container\"> \r\n    <img src={business.imageSrc/* vamosa  susbstituir todos los puntos */} alt=''/> \r\n   </div>\r\n   <h2>{business.name}</h2>\r\n    <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n             <p>{business.adress}</p>\r\n             <p>{business.city}</p>\r\n             <p>{`${business.state} ${business.zipCode}`/*en estos p ponemos cada atributo relacionado a busines. Ojo que usamos comillas */ }</p> \r\n          </div>\r\n        <div className=\"Business-reviews\">\r\n          <h3>{business.category.toUpperCase()}</h3>\r\n          <h3 className=\"rating\">4.5 stars</h3>\r\n           <p>`${business.reviewCount} reviews`</p>\r\n        </div>\r\n    </div>\r\n  </div>\r\n        )\r\n    }\r\n}\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business'; //los .. refieren al directorio padre\r\nclass BusinessList extends React.Component{\r\n    render() {\r\n        return ( //recordar la barra de conclusion en los business q vienen ahora. Ya NO PROCEDE\r\n            <div className=\"BusinessList\"> \r\n             {this.props.businesses.map((business)=>{ /*OJO que habia puesto mal el orden del props y daba error. Esto va a  mandar que usemos el array business*/\r\n                 return <Business business={business} key= {business.id}/>; //renderizara el array. HEMOS AÑADIDO UNA KEY DE ID, RELACIONADA CN LA HOJA DE YELP\r\n              })/*accedemos al array de business, q esta en app.js*/ \r\n            } \r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default BusinessList; //asi lo hacemos exportable","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props) {  //nº3 . Hemos añadido construtor, con un this.state y sus trres keys q se refieren a los dos inputs y a la selecion de filtro de busqueda\r\n        super(props);\r\n        this.state= {\r\n            term:'',\r\n            location:'',\r\n            sortBy: 'best_match',\r\n        };\r\n        this.sortByOptions = {     //ESto era un const sortbyOptions, pero lo hemos introducido en el constructor, y tranformado en this.\r\n            'Best Match': 'best_match' ,\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed':'review_cont'\r\n        }\r\n        this.renderSortByOptions=this.renderSortByOptions.bind(this);\r\n        this.handleTermChange=this.handleTermChange.bind(this); //BINDEAMOS TODOS LOS METODOS Q USEN THIS\r\n        this.handleLocationChange=this.handleLocationChange.bind(this);\r\n        this.handleSearch=this.handleSearch.bind(this);\r\n    }\r\n    getSortByClass(sortByOption) { //funcion crea para chekar si existe un filtro selecionado o no\r\n        if(this.state.sortBy===sortByOption){ //no estoy seguro si es asi. \r\n            return 'active'\r\n        }else{\r\n            return ''\r\n        }\r\n    }\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption})  // De esta manera conseguimos q se cambie el color cnd seleccionamos los filtros\r\n    }\r\n    handleTermChange(event){  //ponemos event en los dos pues van a relacionarse con events\r\n        this.setState({\r\n            term: event.target.value //esto hara q acepte string. EL string q entre por el input\r\n        })\r\n    }\r\n    handleLocationChange(event){\r\n        this.setState({\r\n            location: event.target.value\r\n        })\r\n    }\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy) //CREO MALLLLL\r\n        event.preventDefault(); //CREO MALLLLL\r\n    }\r\n    renderSortByOptions() {  //el fin de este render es display las opciones d busqueda. Recomienda mirar future proof en doc de Yelp\r\n        return Object.keys(this.sortByOptions).map(sortByOption=>{\r\n            let sortByOptionValue= this.sortByOptions[sortByOption]; //asi accedemos al valor de sorbyoptions\r\n            return <li key={sortByOptionValue}  \r\n            className={this.getSortByClass(sortByOptionValue)}/*Con esto vamos a poder ver marcado q sort esta seleccionado, es estetico*/ onClick={this.handleSortByChange.bind(this, sortByOptionValue)} > \r\n                {sortByOption} \r\n            </li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= 'SearchBar' searchYelp= {this.searchYelp}>\r\n                <div className= 'SearchBar-sort-options'>\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className= \"SearchBar-fields\">\r\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/*Añadimos onChange a los dos inputs,para q se ejecute los metodos handle*//>\r\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\r\n                </div>\r\n                <div className=\"SearchBar-submit\" >\r\n                    <a href=\"www.#.com\" onClick={this.handleSearch}>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","const apikey= 'IpRomzGKu4rqYco2VleUSHpP79o5ek9wRiu8ZHzQex9mVdVbN0w1tWKhSRHwf8tg5LrBn3ng_vKw7H-MO0vqoBKOdcVh0tpwPSgq8mQV3w201hDz3x_4ZKUGwk2TXXYx';\r\nconst yelp= {\r\n    \r\n    searchYelp(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, { //la primero esuna API llamada CORS Anywhere, para asi saltar las limitaciones CORS de enlaces externos.. */\r\n            headers: {\r\n                Authorization: `Bearer ${apikey}`,},    }).then((response)=> {\r\n\r\n                    return response.json();\r\n                }).then((jsonResponse=> {\r\n                    if(jsonResponse.businesses) { //comprueba si en jsonResponse esta la key businesses\r\n                        return jsonResponse.businesses.map(business=> { //manda a iterar por todos los elementos del array\r\n                            return { /*si esta, devolvera el array d cosas q pedimos en businesses*/ \r\n                                id: business.id, //no se xq esta. nNo la encuentro.IMPORTATE: TODO ESTAS TERMINACIONES LAS MARCA LA API DE YELP\r\n                                imageSrc: business.image_url, //pense q era imgaSrc, pero no, \r\n                                name: business.name,\r\n                                adress: business.location.adress,\r\n                                city: business.location.city, //hemos añadido lcation pues sino, no renderiza bien la direccion\r\n                                state: business.location.state,\r\n                                zipCode: business.location.zip_code,\r\n                                category: business.categories[0].title, //toma categorias como un array, no lo entiendo muy bien\r\n                                rating: business.rating,\r\n                                reviewCount: business.review_count\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                }));\r\n                \r\n            }\r\n        };\r\n\r\nexport default yelp;    \r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport BusinessList from'./components/BusinessList/BusinessList';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Yelp from './util/Yelp';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state= {\n        businesses:[],\n    };\n    this.searchYelp=this.searchYelp.bind(this);\n}\n  searchYelp(term, location, sortBy){ //creamos este metodo para añadir funcionalidad al boton de LET's go\n     Yelp.searchYelp(term, location, sortBy).then((businesses=>{this.setState({businesses: businesses})}))\n     \n  }\n  render() {\n   return ( \n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar searchYelp={this.searchYelp}/>\n      <BusinessList businesses={this.state.businesses}/*ponemos aqui el arry para q se renderize*//> \n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}